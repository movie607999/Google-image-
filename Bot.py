cd path/to/your/project
import requests
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters
from config import BOT_TOKEN, RAPIDAPI_KEY

# рж▓рзЛржЧрж┐ржВ рж╕рзЗржЯржЖржк
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# ЁЯОе RapidAPI IMDb API ржерзЗржХрзЗ рждржерзНржп ржЖржирж╛
def get_movie_info(movie_name):
    url = "https://imdb8.p.rapidapi.com/title/find"
    headers = {
        "X-RapidAPI-Key": RAPIDAPI_KEY,
        "X-RapidAPI-Host": "imdb8.p.rapidapi.com"
    }
    params = {"q": movie_name}

    response = requests.get(url, headers=headers, params=params).json()
    
    try:
        movie = response["results"][0]
        return {
            "title": movie["title"],
            "year": movie.get("year", "N/A"),
            "rating": "N/A",  # RapidAPI ржерзЗржХрзЗ рж╕рж░рж╛рж╕рж░рж┐ рж░рзЗржЯрж┐ржВ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ ржирж╛
            "plot": movie.get("plotOutline", {}).get("text", "No description available."),
            "poster": movie.get("image", {}).get("url", None),
        }
    except (KeyError, IndexError):
        return None

# ЁЯФО ржорзБржнрж┐ рж╕рж╛рж░рзНржЪ ржлрж╛ржВрж╢ржи (ржЧрзНрж░рзБржкрзЗ ржХрзЗржЙ ржорзБржнрж┐рж░ ржирж╛ржо рж▓рж┐ржЦрж▓рзЗ)
async def search_movie(update: Update, context):
    movie_name = update.message.text
    movie_data = get_movie_info(movie_name)

    if not movie_data:
        await update.message.reply_text("тЪа ржорзБржнрж┐ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐! ржЕржирзНржп ржирж╛ржо ржжрж┐рзЯрзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        return

    # ЁЯУМ IMDb рждржерзНржп рждрзИрж░рж┐ ржХрж░рж╛
    reply_text = f"ЁЯОм **{movie_data['title']} ({movie_data['year']})**\n"
    reply_text += f"тнР IMDb: {movie_data['rating']}/10\n"
    reply_text += f"ЁЯУЦ {movie_data['plot']}\n"

    # ЁЯОн ржкрзЛрж╕рзНржЯрж╛рж░ рж╕рж╣ рж░рзЗрж╕ржкржирзНрж╕ ржкрж╛ржарж╛ржирзЛ (ржкрзБрж░ржирзЛ ржмржЯрзЗрж░ ржЖржЧрзЗржЗ ржорзЗрж╕рзЗржЬ ржпрж╛ржмрзЗ)
    if movie_data["poster"]:
        await update.message.reply_photo(photo=movie_data["poster"], caption=reply_text, parse_mode="Markdown")
    else:
        await update.message.reply_text(reply_text, parse_mode="Markdown")

# ЁЯПГ ржмржЯ ржЪрж╛рж▓рж╛ржирзЛ
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    
    # рж╕рж╛рж░рзНржЪ ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ (ржЧрзНрж░рзБржкрзЗ ржЖржЧрзЗ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп priority ржмрзЗрж╢рж┐)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_movie), group=-1)

    logging.info("ЁЯУб Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
